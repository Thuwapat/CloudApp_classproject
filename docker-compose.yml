# Database 
version: "3.8"
name: coe_room_acesscontrol
services:
  auth_db:
    image: postgres:13
    container_name: my_auth_db
    restart: always
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypass
      POSTGRES_DB: auth_db
    ports:
      - "5432:5432"
    volumes:
      - auth_db_data:/var/lib/postgresql/data
    networks:
      - app-network
      
  room_req_db:
    image: postgres:13
    container_name: my_room_req_db
    restart: always
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypass
      POSTGRES_DB: room_req_db
    ports:
      - "5433:5432"
    volumes:
      - room_req_db_data:/var/lib/postgresql/data
    networks:
      - app-network

  room_mgmt_db:
    image: postgres:13
    container_name: my_room_mgmt_db
    restart: always
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypass
      POSTGRES_DB: room_mgmt_db
    ports:
      - "5434:5432"
    volumes:
      - room_mgmt_db_data:/var/lib/postgresql/data
    networks:
      - app-network

  authen_backend:
    build:
      context: ./Backend    # โฟลเดอร์ที่มี Dockerfile สำหรับ Flask
      dockerfile: authen/dockerfile.authen
    container_name: authen_backend
    ports:
      - "5000:5000"           # map port 5000 ของ container กับเครื่อง host
    #volumes:
    #  - ./certificates:/app/authen/certificates 
    environment:
      - FLASK_ENV=development  # ตั้งค่า environment สำหรับ Flask (เปลี่ยนเป็น production เมื่อต้องการ)
      - DATABASE_URL=postgresql://myuser:mypass@auth_db:5432/auth_db
      - GOOGLE_CLIENT_ID=1033311153846-985omsfscb3beu6u42c0qpo6k6m5vheg.apps.googleusercontent.com
      - GOOGLE_CLIENT_SECRET=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
    depends_on:
      - auth_db                   # รอให้บริการฐานข้อมูลพร้อมก่อน backend เริ่มทำงาน
    networks:
      - app-network

  room_req_backend:
    build:
      context: ./Backend
      dockerfile: room_request/dockerfile.req
    container_name: room_req_backend
    ports:
      - "5001:5001"
    #volumes:
    #  - ./certificates:/app/room_request/certificates 
    environment:
      - FLASK_ENV=development
      - DATABASE_ROOM_URL=postgresql://myuser:mypass@room_req_db:5432/room_req_db
    depends_on:
      - room_req_db
      - authen_backend
    networks:
      - app-network

  room_mgmt_backend:
    build:
      context: ./Backend
      dockerfile: room_mgmt/dockerfile.mgmt
    container_name: room_mgmt_backend
    ports:
      - "5002:5002"
    #volumes:
    #  - ./certificates:/app/room_request/certificates 
    environment:
      - FLASK_ENV=development
      - DATABASE_ROOM_URL=postgresql://myuser:mypass@room_mgmt_db:5432/room_mgmt_db
    depends_on:
      - room_req_db
      - authen_backend
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend      # ชี้ไปที่โฟลเดอร์ frontend ที่มี Dockerfile
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules        # mount โค้ดจากเครื่อง host ไปที่ /app ใน container
      - frontend_next:/app/.next       # ใช้ anonymous volume สำหรับ node_modules
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_AUTH_URL=http://localhost:5000  # สำหรับ Authentication
      - NEXT_PUBLIC_API_ROOM_URL=http://localhost:5001  # สำหรับ Room Request
    command: npm run dev
    depends_on:
      - authen_backend
      - room_req_backend
    networks:
      - app-network

volumes:
  auth_db_data:
  room_req_db_data:
  room_mgmt_db_data:
  frontend_node_modules:  # เพิ่ม Named Volume สำหรับ node_modules
  frontend_next:  # เพิ่ม Named Volume สำหรับ .next

networks:
  app-network:
    driver: bridge